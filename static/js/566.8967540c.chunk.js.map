{"version":3,"file":"static/js/566.8967540c.chunk.js","mappings":"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","sources":["schemas/contactSchema.js","components/ContactForm/ContactForm.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const contactSchema = yup.object({\n  name: yup\n    .string()\n    .required('Name is required')\n    .max(30, 'Max length must be less than 30 chars'),\n  number: yup\n    .string()\n    .required('Phone is required')\n    .min(10, 'Min length must be more than 6 chars')\n    .max(18, 'Max length must be less than 18 chars'),\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport { selectContacts } from '../../redux/contactSlice';\nimport { addContact } from '../../redux/operations';\nimport { contactSchema } from 'schemas/contactSchema';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    reset,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(contactSchema),\n  });\n\n  const submit = data => {\n    if (checkContact(data.name)) {\n      return;\n    }\n\n    dispatch(addContact(data));\n    reset();\n  };\n\n  const checkContact = name => {\n    const checkName = name.toLowerCase();\n    const isExist = contacts.find(\n      item => item.name.toLowerCase() === checkName\n    );\n    if (isExist) {\n      alert(`${name} is already exist`);\n    }\n    return isExist;\n  };\n\n  return (\n    <div className=\"container mx-auto\">\n      <form\n        onSubmit={handleSubmit(submit)}\n        className=\"flex gap-4 justify-center\"\n      >\n        <div>\n          <input\n            {...register('name')}\n            type=\"text\"\n            placeholder=\"Insert name\"\n            className=\"appearance-none rounded-full nm-inset-gray-200 leading-5 px-8 py-4 flex-grow w-full focus:nm-inset-gray-300 focus:outline-none\"\n          />\n          <p className=\"pt-1 text-red-500 text-sm text-center\">\n            {errors.name?.message}\n          </p>\n        </div>\n\n        <div>\n          <input\n            {...register('number')}\n            type=\"text\"\n            placeholder=\"Insert phone\"\n            className=\"appearance-none rounded-full nm-inset-gray-200 leading-5 px-8 py-4 flex-grow w-full focus:nm-inset-gray-300 focus:outline-none\"\n          />\n          <p className=\"pt-1 text-red-500 text-sm text-center\">\n            {errors.number?.message}\n          </p>\n        </div>\n\n        <div>\n          <button\n            type=\"submit\"\n            className=\"rounded-full nm-flat-gray-200 hover:nm-flat-gray-200-lg leading-5 px-8 py-4 text-gray-600 font-bold  transition duration-200 ease-in-out transform hover:scale-110\"\n          >\n            Add contact\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from './contactSlice';\nimport { selectFilter } from './filterSlice';\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filterLowCase = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterLowCase)\n    );\n  }\n);\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport {\n  deleteContact,\n  editContact,\n  fetchContacts,\n} from '../../redux/operations';\nimport { selectFilteredContacts } from '../../redux/selectors';\nimport Notification from 'components/Notification/Notification';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  const [selectedId, setSelectedId] = useState(null);\n  const [contact, setContact] = useState({});\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const changeMode = ({ id, name, number }) => {\n    setSelectedId(selectedId === id ? null : id);\n    setContact({ id, name, number });\n  };\n\n  const handleSubmit = () => {\n    dispatch(editContact(contact));\n    setSelectedId(null);\n  };\n\n  const centerStyle = {\n    position: 'absolute',\n    top: '30%',\n    left: '30%',\n    transform: 'translate(-50%, -50%) ',\n    zIndex: 10,\n  };\n\n  return (\n    <>\n      {contacts.length ? (\n        <AnimatePresence>\n          <ul className=\"px-6 grid grid-cols-3 py-6 gap-6 container mx-auto\">\n            {contacts.map(({ id, name, number }) => (\n              <motion.li\n                key={id}\n                layout\n                initial={{ opacity: 0.9 }}\n                animate={{\n                  scale: selectedId === id ? 1.5 : 1,\n                  opacity: selectedId === id ? 1 : 0.9,\n                }}\n                exit={{ opacity: 0, scale: 0 }}\n                transition={{ duration: 0.5 }}\n                className=\"nm-flat-gray-200-lg rounded-lg p-8 text-center max-w-sm w-full\"\n                style={selectedId === id ? centerStyle : {}}\n              >\n                <div className=\"p-2\">\n                  <p>Name </p>\n                  {selectedId === id ? (\n                    <input\n                      onChange={e => {\n                        if (contact.id === id) {\n                          setContact(prev => ({\n                            ...prev,\n                            name: e.target.value,\n                          }));\n                        }\n                      }}\n                      value={contact.name}\n                      className=\"appearance-none text-center rounded-full nm-inset-gray-200 leading-5 mx-2 px-2 py-2 flex-grow w-full focus:nm-inset-gray-300 focus:outline-none\"\n                    />\n                  ) : (\n                    <span className=\"font-bold w-full text-lg\">{name}</span>\n                  )}\n                </div>\n                <div className=\"p-2\">\n                  <p>Phone </p>\n                  {selectedId === id ? (\n                    <input\n                      value={contact.number}\n                      onChange={e =>\n                        setContact(prev => ({\n                          ...prev,\n                          number: e.target.value,\n                        }))\n                      }\n                      className=\"appearance-none text-center rounded-full nm-inset-gray-200 leading-5 mx-2 px-2 py-2 flex-grow w-full focus:nm-inset-gray-300 focus:outline-none\"\n                    />\n                  ) : (\n                    <span className=\"font-bold text-lg\">{number}</span>\n                  )}\n                </div>\n                <div className=\"card-actions justify-end py-2\">\n                  {selectedId === id ? (\n                    <button\n                      onClick={() => handleSubmit()}\n                      className=\"w-12 h-12 flex justify-center items-center rounded-full nm-convex-gray-200-xs hover:nm-inset-gray-200-xs hover:font-semibold text-sm\"\n                    >\n                      Save\n                    </button>\n                  ) : (\n                    <button\n                      className=\"w-12 h-12 flex justify-center items-center rounded-full nm-convex-gray-200-xs hover:nm-inset-gray-200-xs hover:font-semibold text-sm\"\n                      onClick={() => changeMode({ id, number, name })}\n                    >\n                      Edit\n                    </button>\n                  )}\n                  <button\n                    onClick={() => dispatch(deleteContact(id))}\n                    className=\"w-12 h-12 flex justify-center items-center rounded-full nm-convex-gray-200-xs text-red-500 hover:nm-inset-gray-200-xs hover:font-semibold text-sm\"\n                  >\n                    Delete\n                  </button>\n                  {selectedId === id && (\n                    <motion.button\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      exit={{ scale: 0 }}\n                      onClick={() => setSelectedId(null)}\n                      className=\"w-12 h-12 flex justify-center items-center rounded-full nm-convex-gray-200-xs hover:nm-inset-gray-200-xs hover:font-semibold text-sm\"\n                    >\n                      Close\n                    </motion.button>\n                  )}\n                </div>\n              </motion.li>\n            ))}\n          </ul>\n        </AnimatePresence>\n      ) : (\n        <Notification message=\"No contacts\" />\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport React from 'react';\n\nconst Contacts = () => {\n  return (\n    <>\n      <ContactForm />\n      <div className=\"divider py-3 font-bold text-xl\">Contacts</div>\n      <ContactList />\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["contactSchema","yup","name","required","max","number","min","_errors$name","_errors$number","contacts","useSelector","selectContacts","dispatch","useDispatch","_useForm","useForm","resolver","yupResolver","register","reset","handleSubmit","errors","formState","checkContact","checkName","toLowerCase","isExist","find","item","alert","concat","_jsx","className","children","_jsxs","onSubmit","data","addContact","_objectSpread","type","placeholder","message","selectFilteredContacts","createSelector","selectFilter","filter","filterLowCase","contact","includes","_useState","useState","_useState2","_slicedToArray","selectedId","setSelectedId","_useState3","_useState4","setContact","useEffect","fetchContacts","centerStyle","position","top","left","transform","zIndex","_Fragment","length","AnimatePresence","map","_ref2","id","motion","layout","initial","opacity","animate","scale","exit","transition","duration","style","onChange","e","prev","target","value","onClick","editContact","_ref","changeMode","deleteContact","Notification","ContactForm","ContactList"],"sourceRoot":""}